#!/usr/bin/env python3
#
# retrieve geo information from ip-api.com 
# for fqdns and ip addresses (ipv4 & ipv6)

# author: Martin Ohmann <martin@mohmann.de>
#

import argparse
import json
import os
import re
import socket
import sys
import time
import urllib.request

from collections import OrderedDict

# ipv4/6 regex from https://gist.github.com/mnordhoff/2213179
ipv4_re = re.compile('^(?:(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$')
ipv6_re = re.compile('^(?:(?:[0-9A-Fa-f]{1,4}:){6}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|::(?:[0-9A-Fa-f]{1,4}:){5}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(?:[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){4}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){3}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){,2}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){2}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){,3}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}:(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){,4}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){,5}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}|(?:(?:[0-9A-Fa-f]{1,4}:){,6}[0-9A-Fa-f]{1,4})?::)$')

class Colors(object):
    if sys.stdout.isatty():
        BLACK   = '\033[0;30m'
        RED     = '\033[0;31m'
        GREEN   = '\033[0;32m'
        YELLOW  = '\033[0;33m'
        BLUE    = '\033[0;34m'
        MAGENTA = '\033[0;35m'
        CYAN    = '\033[0;36m'
        WHITE   = '\033[0;37m'
        RESET   = '\033[0m'
    else:
        BLACK   = RED     = GREEN   = ''
        YELLOW  = BLUE    = MAGENTA = ''
        CYAN    = WHITE   = RESET   = ''

    @classmethod
    def enclose(cls, thing, color):
        return color + thing + cls.RESET

class MessageLogger(object):
    def __init__(self, quiet=False):
        self.quiet = quiet
        self.errors = 0

    def log(self, msg, log_type='success', color=Colors.GREEN, file=sys.stderr):
        if not self.quiet or log_type == 'error':
            print('[%s] %s' % (Colors.enclose(log_type, color), msg), file=file)

    def error(self, msg):
        self.log(msg, 'error', Colors.RED, file=sys.stderr)
        self.errors += 1

    def info(self, msg):
        self.log(msg, 'info', Colors.CYAN)

    def success(self, msg):
        self.log(msg)

class GeoIPInfo(MessageLogger):
    base_url = 'http://ip-api.com/json/'

    def __init__(self, args):
        self.hosts = args.hosts
        self.raw_output = args.raw_output
        self.json_output = args.json_output
        self.coords_only = args.coords_only
        super(GeoIPInfo, self).__init__(self.raw_output or self.json_output)

    def _print_pair(self, key, val):
        if self.raw_output:
            print('%s: %s' % (key, val))
        else:
            print('  %s%-12s%s: %s' % (Colors.WHITE, key, Colors.RESET, val))

    def retrieve_ip_info(self, host=None):
        if host != None:
            if ipv4_re.match(host):
                url = self.base_url + host
                host_str = host
            elif ipv6_re.match(host):
                url = self.base_url + host
                host_str = '[%s]' % host
            else:
                try:
                    ip_addr = socket.gethostbyname(host)
                    url = self.base_url + ip_addr
                    host_str = '%s (%s)' % (host, ip_addr)
                except socket.gaierror as e:
                    self.error('failed to retrieve hostinfo for %s: %s' % 
                        (Colors.enclose(host, Colors.YELLOW), e))
                    return
                except Exception as e:
                    self.error('illegal address: %s' %
                        Colors.enclose(host, Colors.YELLOW))
                    return

            self.info('fetching geo info for %s' % 
                Colors.enclose(host_str, Colors.YELLOW))
        else:
            url = self.base_url
            self.info('fetching geo info')

        try:
            start = time.time()
            with urllib.request.urlopen(url, timeout=5) as resource:
                elapsed = time.time() - start

                raw = resource.read()
                decoded = raw.decode("utf-8")
                data = json.loads(decoded, object_pairs_hook=OrderedDict)

                self.success('retrieved %s bytes in %f sec' % 
                    (len(raw), elapsed))

                if self.json_output:
                    print(json.dumps(data, indent=2, sort_keys=True))
                    return

                if self.raw_output:
                    print('host: %s' % host)

                for key, val in data.items():
                    if not self.coords_only or key in ['lat', 'lon']:
                        self._print_pair(key, val)

                if self.raw_output:
                    print('')

        except urllib.error.URLError as e:
            self.error('failed to retrieve ip info: %s' % e.reason)
        except urllib.error.HTTPError as e:
            self.error('the server replied with status code %s' % e.code)
        except Exception as e:
            self.error(e)

    def retrieve(self):
        if len(self.hosts) > 0:
            for host in self.hosts:
                self.retrieve_ip_info(host)
        else:
            self.retrieve_ip_info()

        return 1 if self.errors else 0

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Retrieve geo information '+
        'for hosts. If no host is specified, geo information for the '+
        'current public ip address is obtained.')
    parser.add_argument('hosts', metavar='host', type=str, nargs='*',
        help='FQDN, IPv4 or IPv6 address')
    parser.add_argument('-c', '--coords', dest='coords_only', action='store_true',
        help='only print coords for each host')
    parser.add_argument('-r', '--raw', dest='raw_output', action='store_true',
        help='print raw output to stdout')
    parser.add_argument('-j', '--json', dest='json_output', action='store_true',
        help='print json output to stdout')
    args = parser.parse_args()

    try:
        geoipinfo = GeoIPInfo(args)
        sys.exit(geoipinfo.retrieve())
    except KeyboardInterrupt:
        sys.exit(1)
